@inherits TestContext

@code {
    [Fact]
    public void BitNumberField_Should_Render_Default_Markup_Correctly()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Theory]
    [InlineData(null, "any")]
    [InlineData(1.0, "1")]
    [InlineData(0.5, "0.5")]
    public void BitNumberField_Should_Render_Correctly_Step_Parameter(double? step, string expectedStepString)
    {
        double? value = null;

        var component = Render(
            @<BitNumberField T="double?" 
                             Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             Step="step"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="@expectedStepString" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Render_Correctly_Min_Attribute_If_Specified()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             Min="0"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" min="0" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Render_Correctly_Max_Attribute_If_Specified()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             Max="100"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" max="100" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Render_Correctly_Disabled_Field()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             Disabled="true"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" disabled />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add" disabled>
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub" disabled>
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Render_Correctly_Readonly_Field()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             Readonly="true"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" readonly />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add" disabled>
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub" disabled>
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Render_Adaptive_Field_Correctly()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             Adaptive="true"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number input-number-adaptive">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Render_Symbol_Correctly()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value">
                <SymbolContent>%</SymbolContent>
             </BitNumberField>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-symbol-label">label</label>
                <div class="input-group input-number">
                    <span class="input-group-text fw-semibold">%</span>
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Set_Increment_Button_Text_Correctly()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             IncrementButtonText="Increment field value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increment field value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
             </div>);
    }

    [Fact]
    public void BitNumberField_Should_Set_Decrement_Button_Text_Correctly()
    {
        int? value = null;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"
                             DecrementButtonText="Decrement field value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" step="any" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrement field value</span>
                        </button>
                    </span>
                </div>
             </div>
    );
    }

    [Fact]
    public void BitNumberField_Should_Avoid_Render_Min_And_Max_With_Int_Value_If_Not_Specified()
    {
        int value = 1;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label active">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" value="1" step="1" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
            </div>);
    }

    [Fact]
    public void BitNumberField_Should_Avoid_Render_Min_And_Max_With_Long_Value_If_Not_Specified()
    {
        long value = 1;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label active">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" value="1" step="1" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
            </div>);
    }

    [Fact]
    public void BitNumberField_Should_Avoid_Render_Min_And_Max_With_Short_Value_If_Not_Specified()
    {
        short value = 1;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label active">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" value="1" step="1" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
            </div>);
    }

    [Fact]
    public void BitNumberField_Should_Avoid_Render_Min_And_Max_With_Float_Value_If_Not_Specified()
    {
        float value = 1f;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label active">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" value="1" step="1" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
            </div>);
    }

    [Fact]
    public void BitNumberField_Should_Avoid_Render_Min_And_Max_With_Double_Value_If_Not_Specified()
    {
        double value = 1;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label active">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" value="1" step="1" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
            </div>);
    }

    [Fact]
    public void BitNumberField_Should_Avoid_Render_Min_And_Max_With_Decimal_Value_If_Not_Specified()
    {
        decimal value = 1;

        var component = Render(
            @<BitNumberField Label="label"
                             Id="test-numberfield"
                             @bind-Value="value"/>);

        component.MarkupMatches(
            @<div class="form-group">
                <label for="test-numberfield" class="input-number-label active">label</label>
                <div class="input-group input-number">
                    <input type="number" class="form-control" id="test-numberfield" name="test-numberfield" value="1" step="1" />
                    <span class="input-group-text align-buttons flex-column">
                        <button type="button" class="input-number-add">
                            <span class="visually-hidden">Increase value</span>
                        </button>
                        <button type="button" class="input-number-sub">
                            <span class="visually-hidden">Decrease value</span>
                        </button>
                    </span>
                </div>
            </div>);
    }
}
